extern crate num;
use num::abs;
use std::collections::HashMap;


pub struct Point {
	x: i32,
	y: i32,
	current_state: bool,
	future_state: bool,
	live_neighbours: i32,
}

impl Default for Point {
    fn default() -> Point {
        Point {
			x: 0,
			y: 0,
			current_state: true,
			future_state: false,
			live_neighbours: 0,
        }
    }
}

pub fn count_neighbours(p: (i32, i32), world: HashMap<(i32,i32), Point>) -> i32 {
	let mut num_neighbours: i32 = 0;
	for ( &pp , point) in world.iter() {
		if is_neighbour(p, pp) { 
			num_neighbours += 1;
		}
	}
	return num_neighbours;
}

pub fn is_neighbour(p1: (i32, i32), p2: (i32, i32)) -> bool {

	let (x1, y1): (i32, i32) = p1;
	let (x2, y2): (i32, i32) = p2;

	if x1 == x2 && y1 == y2 {
		false
	} else {
		if abs(x1 - x2) < 2 && abs(y1 - y2) < 2 {
			true
		} else {
			false
		}
	}
}

pub fn populate_neighbours(world: &mut Vec<Point>) {
	for i in 0..(world.len()-1) {
		// world[i].live_neighbours = count_neighbours(&world[i], &world);
	}
}

pub fn populate_candidates(world: &Vec<Point>, candidates: &mut Vec<Point>) {
	for point in world {
		candidates.push(Point {x:(point.x - 1), y:(point.y - 1), ..Default::default()});
		candidates.push(Point {x:(point.x - 1), y:(point.y), ..Default::default()});
		candidates.push(Point {x:(point.x - 1), y:(point.y + 1), ..Default::default()});
		candidates.push(Point {x:(point.x), y:(point.y - 1), ..Default::default()});
		candidates.push(Point {x:(point.x), y:(point.y + 1), ..Default::default()});
		candidates.push(Point {x:(point.x + 1), y:(point.y - 1), ..Default::default()});
		candidates.push(Point {x:(point.x + 1), y:(point.y), ..Default::default()});
		candidates.push(Point {x:(point.x + 1), y:(point.y + 1), ..Default::default()});
	}
}

pub fn main() {
	let bob: Point = Point {x:0, y: 0, ..Default::default()};

	let mut world = HashMap::new();
	world.insert((0,0), bob);


	// let mut world: Vec<Point> = vec![];
	// let mut candidates: Vec<Point> = vec![];
	// world.push(bob);
}

#[cfg(test)]
mod tests {

	// use super::are_cells_neighbours;
	use super::*;
	use std::collections::HashMap;

	#[test]
	fn are_cells_neighbours() {
		let p1 = (0,0);
		let p2 = (0,1);
		let p3 = (1,2);
		let p4 = (0,2);
		let p5 = (0,3);
		assert_eq!(true, is_neighbour(p1, p2));
		assert_eq!(false, is_neighbour(p1, p3));
		assert_eq!(true, is_neighbour(p2, p3));
		assert_eq!(false, is_neighbour(p1, p4));
		assert_eq!(false, is_neighbour(p1, p5));
	}

	#[test]
	fn cell_cant_be_its_own_neighbour() {
		let p1 = (0,0);
		assert_eq!(false, is_neighbour(p1, p1));
	}

	#[test]
	fn should_return_number_of_live_adjacent_cells_when_0() {
		let bob = (0,0);
		let mut world = HashMap::new(); 
		world.insert( (0,0), Point {x:0, y: 0, ..Default::default()});
		world.insert( (0,0), Point {x:2, y: 2, ..Default::default()});
		assert_eq!(0, count_neighbours(bob, world))
	}

	#[test]
	fn should_return_number_of_live_adjacent_cells_when_1() {
		let bob = (0, 0);
		let mut world = HashMap::new(); 
		world.insert( (1,1), Point {x:1, y: 1, ..Default::default()});
		assert_eq!(1, count_neighbours(bob, world))
	}

	#[test]
	fn should_return_number_of_live_adjacent_cells_when_2() {
		let bob = (0, 0);
		let mut world = HashMap::new(); 
		world.insert( (0,1), Point {x:0, y: 1, ..Default::default()});
		world.insert( (1,0), Point {x:1, y: 0, ..Default::default()});
		assert_eq!(2, count_neighbours(bob, world))
	}

	#[test]
	fn should_return_number_of_live_adjacent_cells_when_8() {
		let bob = (0, 0);
		let mut world = HashMap::new(); 
		world.insert( (-1,-1), Point {x:-1, y: -1, ..Default::default()});
		world.insert( (-1,0), Point {x:-1, y: 0, ..Default::default()});
		world.insert( (-1, 1), Point {x:-1, y: 1, ..Default::default()});
		world.insert( (0, -1),Point {x:0, y: -1, ..Default::default()});
		world.insert( (Point {x:0, y: 1, ..Default::default()});
		world.insert(Point {x:1, y: -1, ..Default::default()});
		world.insert(Point {x:1, y: 0, ..Default::default()});
		world.insert(Point {x:1, y: 1, ..Default::default()});
		assert_eq!(8, count_neighbours(bob, world))
	}

	#[test]
	fn should_check_state_when_returning_nighbours() {
		let bob: Point = Point {x:0, y: 0, ..Default::default()};
		let mut world: Vec<Point> = vec![]; 
		world.push(Point {x:0, y: 1, ..Default::default()});
		world.push(Point {x:1, y: 0, ..Default::default()});
		world.push(Point {x:1, y: 1, current_state: false, ..Default::default()});
		assert_eq!(2, count_neighbours(&bob, &world))
	}

	#[test]
	fn should_populate_all_neighbours() {
		let mut world: Vec<Point> = vec![]; 
		world.push(Point {x:0, y: 1, ..Default::default()});
		world.push(Point {x:1, y: 0, ..Default::default()});
		world.push(Point {x:1, y: 1, current_state: false, ..Default::default()});
		populate_neighbours(&mut world);
		let ref p0 = world[0];
		let ref p1 = world[1];
		let ref p2 = world[2];
		assert_eq!(1, p0.live_neighbours);
		assert_eq!(1, p1.live_neighbours);
		assert_eq!(0, p2.live_neighbours);
	}

	#[test]
	fn should_create_candidate_list_1_point() {
		let mut world: Vec<Point> = vec![]; 
		let mut candidates: Vec<Point> = vec![]; 
		world.push(Point {x:0, y: 1, ..Default::default()});
		populate_candidates(&world, &mut candidates);
		assert_eq!(8, candidates.len());
	}

}
